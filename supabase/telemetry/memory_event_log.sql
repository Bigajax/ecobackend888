-- Telemetry table to integrate Mixpanel / analytics from the backend

create schema if not exists telemetry;

do $$
begin
    if to_regclass('telemetry.memory_event_log') is not null then
        delete from telemetry.memory_event_log where false;
    end if;
end;
$$;

create table if not exists telemetry.memory_event_log (
    id bigint generated by default as identity primary key,
    usuario_id uuid not null,
    event_name text not null,
    metadata jsonb not null default '{}'::jsonb,
    context jsonb not null default '{}'::jsonb,
    created_at timestamptz not null default now(),
    sent_at timestamptz,
    delivery_status text not null default 'pending', -- pending | success | failed
    error_details text
);

create index if not exists memory_event_log_usuario_idx
    on telemetry.memory_event_log (usuario_id, created_at desc);

create index if not exists memory_event_log_status_idx
    on telemetry.memory_event_log (delivery_status, created_at desc);

create or replace function telemetry.log_memory_event(
    p_usuario_id uuid,
    p_event_name text,
    p_metadata jsonb default '{}'::jsonb,
    p_context jsonb default '{}'::jsonb
)
returns telemetry.memory_event_log
security definer
set search_path = public, telemetry
as $$
declare
    v_auth_user uuid := nullif(current_setting('request.jwt.claim.sub', true), '')::uuid;
    v_is_service boolean := current_setting('request.jwt.claim.role', true) = 'service_role';
    v_row telemetry.memory_event_log;
begin
    if not v_is_service and v_auth_user is distinct from p_usuario_id then
        raise exception 'jwt user mismatch (expected %, got %)', p_usuario_id, v_auth_user
            using errcode = '42501';
    end if;

    insert into telemetry.memory_event_log(usuario_id, event_name, metadata, context)
    values (p_usuario_id, p_event_name, coalesce(p_metadata, '{}'::jsonb), coalesce(p_context, '{}'::jsonb))
    returning * into v_row;

    return v_row;
end;
$$ language plpgsql;

comment on function telemetry.log_memory_event is 'Persist a memory-related telemetry event for downstream Mixpanel ingestion.';
