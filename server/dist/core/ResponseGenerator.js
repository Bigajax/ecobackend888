"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.fastGreet = fastGreet;
exports.microReflexoLocal = microReflexoLocal;
exports.chatCompletion = chatCompletion;
const OpenRouterAdapter_1 = require("../adapters/OpenRouterAdapter");
const text_1 = require("../utils/text");
const hedge_1 = require("./policies/hedge");
const MODEL_MAIN = process.env.ECO_MODEL_MAIN || "openai/gpt-5-chat";
const MODEL_TECH_ALT = process.env.ECO_MODEL_TECH_ALT || "openai/gpt-5-mini";
async function fastGreet(prompt) {
    const lightSystem = "VocÃª Ã© a ECO, acolhedora e concisa. Responda em 1â€“2 frases, em PT-BR, convidando a pessoa a comeÃ§ar. Evite perguntas mÃºltiplas.";
    const headers = {
        Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
        "Content-Type": "application/json",
        "HTTP-Referer": process.env.PUBLIC_APP_URL || "http://localhost:5173",
        "X-Title": "Eco App - Fast Lane",
    };
    const data = await (0, OpenRouterAdapter_1.callOpenRouterChat)({
        model: MODEL_TECH_ALT,
        temperature: 0.6,
        max_tokens: 180,
        messages: [
            { role: "system", content: lightSystem },
            { role: "user", content: prompt },
        ],
    }, headers, 6000);
    const raw = data?.choices?.[0]?.message?.content ??
        "OlÃ¡! ðŸ™‚ Estou aqui. O que tÃ¡ pedindo atenÃ§Ã£o agora?";
    return (0, text_1.formatarTextoEco)((0, text_1.limparResposta)(raw));
}
const REFLEXAO_MAP = {
    // Energia baixa / ExaustÃ£o
    cansaco: {
        patterns: [/cansad/, /exaust/, /esgotad/, /sem energia/, /sem forÃ§/, /derrubad/],
        responses: [
            "Entendi. Parece que o corpo estÃ¡ pedindo pausa. Quer comeÃ§ar com 1 minuto de respiraÃ§Ã£o ou prefere sÃ³ desabafar um pouco?",
            "O cansaÃ§o chegou forte. Topa fazer um check-in rÃ¡pido: qual parte do corpo grita mais por descanso?",
            "Percebo a sua exaustÃ£o. Antes de mais nada: quando foi a Ãºltima pausa real? Quer comeÃ§ar com Ã¡gua e 3 respiraÃ§Ãµes profundas?"
        ],
        priority: 2
    },
    // Ansiedade / PreocupaÃ§Ã£o
    ansiedade: {
        patterns: [/ansios/, /preocupad/, /nervos/, /agitad/, /inquiet/, /tens[aÃ£]o/, /estress/],
        responses: [
            "Percebo ansiedade aÃ­. Topa notar 3 pontos de apoio do corpo agora e, se quiser, me contar onde ela pega mais?",
            "A ansiedade estÃ¡ alta. Vamos tentar: nome 5 coisas que vocÃª vÃª, 4 que vocÃª toca, 3 que vocÃª ouve. Ou prefere falar primeiro?",
            "Sinto a tensÃ£o. Quer soltar em palavras o que mais preocupa, ou comeÃ§amos baixando a ativaÃ§Ã£o do corpo?"
        ],
        priority: 1
    },
    // Tristeza / Melancolia
    tristeza: {
        patterns: [/triste/, /melancoli/, /deprimi/, /pra baixo/, /down/, /desanimat/, /vazi/],
        responses: [
            "Sinto a tristeza chegando. Prefere nomear o que mais doeu ou que eu guie uma micro-pausa?",
            "A tristeza pede espaÃ§o. Topa dar nome ao que tÃ¡ pesando e depois a gente vÃª o que fazer com isso?",
            "Percebo o peso. Quer escrever livremente sobre o que tÃ¡ sentindo ou prefere uma presenÃ§a quieta por um minuto?"
        ],
        priority: 2
    },
    // Raiva / IrritaÃ§Ã£o
    raiva: {
        patterns: [/irritad/, /raiva/, /bravo/, /puto/, /com raiva/, /Ã³dio/, /furioso/],
        responses: [
            "Raiva Ã© energia. Quer soltar em palavras o gatilho principal, sem filtro, ou tentamos baixar um pouco a ativaÃ§Ã£o primeiro?",
            "Sinto a irritaÃ§Ã£o. Topa nomear: o que foi a gota d'Ã¡gua? E o que vocÃª gostaria de fazer com essa energia?",
            "A raiva tem mensagem. Quer descarregar aqui primeiro ou jÃ¡ mapear o que ela tÃ¡ protegendo?"
        ],
        priority: 1
    },
    // Medo / InseguranÃ§a
    medo: {
        patterns: [/medo/, /receio/, /insegur/, /apreensiv/, /assustado/, /com medo/, /pÃ¢nico/],
        responses: [
            "Tem medo no ar. Podemos mapear rapidamente: 1) o que ameaÃ§a, 2) o que te protege, 3) qual seria o prÃ³ximo passo menor. Topa?",
            "O medo apareceu. Primeiro: vocÃª estÃ¡ seguro agora? Depois a gente nomeia do que Ã© o medo e o que fazer com ele.",
            "Percebo a inseguranÃ§a. Quer identificar se Ã© medo real ou ansiedade do 'e se'? Te ajudo a separar os dois."
        ],
        priority: 1
    },
    // Sobrecarga / Overwhelm
    sobrecarga: {
        patterns: [/sobrecarregad/, /muito/, /demais/, /n[aÃ£]o aguento/, /nÃ£o dou conta/, /overwhelm/],
        responses: [
            "Sobrecarga detectada. Vamos fazer um 'dump cerebral'? Lista tudo sem ordem, depois a gente organiza o que Ã© urgente de verdade.",
            "Parece que tÃ¡ sendo demais. Topa fazer um inventÃ¡rio: 1) o que Ã© urgente real, 2) o que Ã© sÃ³ barulho, 3) o que pode esperar?",
            "Entendo. Muita coisa junto. Quer comeÃ§ar escolhendo UMA coisa pra resolver agora, ou precisa desabafar tudo primeiro?"
        ],
        priority: 1
    },
    // ConfusÃ£o / IndecisÃ£o
    confusao: {
        patterns: [/confus/, /perdid/, /sem rumo/, /nÃ£o sei/, /indecis/, /bagunÃ§ad/],
        responses: [
            "Percebo a confusÃ£o. Vamos clarear: qual a pergunta principal que tÃ¡ presa aÃ­? Ã€s vezes sÃ³ nomear jÃ¡ ajuda.",
            "TÃ¡ nebuloso. Topa fazer um exercÃ­cio? Completa: 'Eu estaria mais claro se...' e vÃª o que vem.",
            "A indecisÃ£o tem espaÃ§o. Quer listar prÃ³s/contras ou prefere explorar o que vocÃª realmente quer por baixo disso?"
        ],
        priority: 2
    },
    // SolidÃ£o / DesconexÃ£o
    solidao: {
        patterns: [/solitÃ¡ri/, /sozinho/, /isolad/, /desconect/, /distante/, /abandonad/],
        responses: [
            "Sinto a solidÃ£o. Ela Ã© fÃ­sica (falta de gente) ou emocional (mesmo perto de outros)? Isso muda o caminho.",
            "A desconexÃ£o pesa. Topa identificar: com quem/o quÃª vocÃª sente falta de conexÃ£o? Pessoas, vocÃª mesmo, propÃ³sito?",
            "Percebo o isolamento. Quer comeÃ§ar reconectando com vocÃª mesmo aqui (eu te acompanho) ou prefere pensar em pontes pra fora?"
        ],
        priority: 2
    },
    // Culpa / Vergonha
    culpa: {
        patterns: [/culpad/, /vergonha/, /arrependid/, /remorso/, /erro meu/],
        responses: [
            "Tem culpa no ar. Vamos separar: foi erro seu mesmo ou vocÃª tÃ¡ carregando peso que nÃ£o Ã© seu? Faz diferenÃ§a.",
            "A culpa apareceu. Topa um exercÃ­cio? 1) O que aconteceu (fatos), 2) O que vocÃª podia controlar de verdade, 3) O que fazer agora.",
            "Percebo vergonha. Ela costuma distorcer. Quer nomear o que aconteceu sem julgamento, tipo contando pra um amigo?"
        ],
        priority: 2
    },
    // FrustraÃ§Ã£o / Bloqueio
    frustracao: {
        patterns: [/frustrad/, /travad/, /bloquead/, /empacad/, /nÃ£o sai/, /nÃ£o anda/],
        responses: [
            "FrustraÃ§Ã£o detectada. O que tÃ¡ travando: falta de clareza, falta de energia ou obstÃ¡culo real? Vamos destrinchar.",
            "Percebo o bloqueio. Ã€s vezes ajuda trocar: ao invÃ©s de 'por que nÃ£o consigo?', tenta 'o que eu precisaria pra conseguir?'.",
            "TÃ¡ empacado. Topa mudar o Ã¢ngulo? Me conta: se isso nÃ£o importasse nada, o que vocÃª faria diferente?"
        ],
        priority: 2
    },
    // EsperanÃ§a / MotivaÃ§Ã£o baixa
    desmotivacao: {
        patterns: [/desmotivad/, /sem esperanÃ§a/, /desistindo/, /nÃ£o vale/, /pra qu[eÃª]/, /tanto faz/],
        responses: [
            "Percebo a desmotivaÃ§Ã£o. Ela Ã© cansaÃ§o (precisa pausa) ou descrenÃ§a (precisa reconectar com o porquÃª)? SÃ£o caminhos diferentes.",
            "A esperanÃ§a tÃ¡ baixa. Topa fazer um resgate? Lembra de uma vez que vocÃª superou algo difÃ­cil - o que te moveu lÃ¡?",
            "Sinto o 'pra quÃª'. Sem pressÃ£o: se vocÃª tivesse sÃ³ 10% de energia, no que vocÃª investiria? Ã€s vezes o menor passo acorda algo."
        ],
        priority: 2
    },
    // GratidÃ£o / Positivo (tambÃ©m vale reconhecer!)
    gratidao: {
        patterns: [/grat/, /feliz/, /alegre/, /bem/, /Ã³timo/, /maravilh/, /aliviado/],
        responses: [
            "Que bom sentir isso! Topa registrar o que estÃ¡ gerando esse bem-estar? Anotar ajuda a voltar aqui quando precisar.",
            "Percebo leveza. Aproveita: o que desse momento vocÃª quer guardar ou expandir?",
            "Legal! Quer celebrar isso de alguma forma ou sÃ³ deixar a sensaÃ§Ã£o acontecer?"
        ],
        priority: 3
    }
};
function pickRandom(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
}
function microReflexoLocal(msg) {
    const t = (msg || "").trim().toLowerCase();
    if (!t)
        return null;
    const hits = [];
    for (const [key, cfg] of Object.entries(REFLEXAO_MAP)) {
        if (cfg.patterns.some((rx) => rx.test(t))) {
            hits.push({ key, priority: cfg.priority, responses: cfg.responses });
        }
    }
    if (hits.length === 0)
        return null;
    // menor prioridade = mais urgente (1 > 2 > 3)
    hits.sort((a, b) => a.priority - b.priority);
    const best = hits[0];
    return pickRandom(best.responses) ?? null;
}
async function chatCompletion(messages, maxTokens) {
    const headers = {
        Authorization: `Bearer ${process.env.OPENROUTER_API_KEY}`,
        "Content-Type": "application/json",
        "HTTP-Referer": process.env.PUBLIC_APP_URL || "http://localhost:5173",
        "X-Title": "Eco App - Chat",
    };
    const main = (0, OpenRouterAdapter_1.callOpenRouterChat)({
        model: MODEL_MAIN,
        messages,
        temperature: 0.7,
        top_p: 0.9,
        presence_penalty: 0.1,
        frequency_penalty: 0.1,
        max_tokens: maxTokens,
    }, headers, 9000);
    const mini = (0, OpenRouterAdapter_1.callOpenRouterChat)({
        model: MODEL_TECH_ALT,
        messages,
        temperature: 0.65,
        top_p: 0.9,
        max_tokens: Math.min(420, maxTokens),
    }, headers, 5500);
    return (0, hedge_1.hedge)(main, mini, 2500);
}
//# sourceMappingURL=ResponseGenerator.js.map